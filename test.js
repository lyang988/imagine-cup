var ints = [   
    {"type": "regular", "text": "Perhaps the most crucial difference between Python and Java are their type systems: Java is ‘strongly typed’, whereas Python is ‘weakly typed’. We’ll dig a little deeper into what that means here. "},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Recall the code from the last lesson: "},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python:"},
    {"iscode":true,"language": "python","type": "code", "text": "def print_bigger(a, b):\n    if a > b:\n        print(a)\n    else:\n        print(b)"},
    {"type": "regular", "text": "Java:"},
    {"iscode":true,"language": "java","type": "code", "text": "import java.io.*;\n\nvoid printBigger(int a, int b){\n    if (a > b) {\n        System.out.println(a); \n    } else {\n        System.out.println(b); \n    } \n}"},
    {"type": "regular", "text": "Notice the difference in the way we have defined the arguments."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python:"},
    {"iscode":true,"language": "python","type": "code", "text": "print_bigger(a,b)"},
    {"type": "regular", "text": "Java:"},
    {"iscode":true,"language": "java","type": "code", "text": "printBigger(int a, int b)"},
    {"type": "regular", "text": "This reveals one requirement enforced by Java’s type system: when ‘declaring’ (creating) variables, you must give them a type. The type describes what sort of data the variable stores, must be respected, and cannot be changed.:"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "This means that there is no direct way to translate the following Python code into Java:"},
    {"iscode":true,"language": "python","type": "code", "text": "x = 7\nif input() == \"y\":\n   x = \"yes\"\n\nprint(x)"},
    {"type": "regular", "text": "When translating this code to Java, what type should "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "x"},
    {"type": "regular", "text": " be given? Since we assign an integer to it ("},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "7"},
    {"type": "regular", "text": "), perhaps we should choose "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " (which is Java’s main primitive integer type)? But since we sometimes assign a string to it, should we choose "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "String"},
    {"type": "regular", "text": " (which is Java’s type for strings)? We cannot do both at the same time, as a variable can have only one type, so we are stuck - this is why the code has no direct translation."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "(Note: the typing system in Java is like a strict (enforced) version of the typing hints system Python provides. If you are already used to writing code like:"},
    {"iscode":true,"language": "python","type": "code", "text": "def print_bigger(a : int, b : int) -> None:"},
    {"type": "regular", "text": "Then the transition to Java’s type system will be quite simple. This tutorial will use typing hints liberally.)"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "For now, we will only talk about Java’s "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s, which are very similar to Python’s "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s. For most purposes, they can be used interchangeably:"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python:"},
    {"iscode":true,"language": "python","type": "code", "text": "# This first line sets `x` using an integer literal - these exist in Java too\nx : int = 12\ny : int = 3\nz : int = x + y\n# z now contains the value `15`\nz += 1\n# z now contains the value `16`\n"},
    {"type": "regular", "text": "Java:"},
    {"iscode":true,"language": "java","type": "code", "text": "int x;\nint y;\nint z;\n\n// Again, this sets `x` using an integer literal, just like in Python\nx = 12;\ny = 3;\nz = x + y;\n// z now contains the value `15`\nz += 1;\n// z now contains the value `16`\n"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Or, in a more abbreviated form:"},
    {"iscode":true,"language": "java","type": "code", "text": "int x = 12; // The declaration and initial assignment of a variable are often combined\nint y = 3;\nint z = x + y;\n// z now contains the value `15`\nz += 1;\n// z now contains the value `16`\n"},
    {"type": "regular", "text": "Observe that we do not write "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int z += 1;"},
    {"type": "regular", "text": ". The type name (in this case "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": ") is only provided when declaring (creating) the variable, which is only done the first time it appears."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "In Java, the addition (+), subtraction (-), multiplication (*), division (/), and modulus (%) operators work effectively identically to Python. Hexadecimal and binary literals (0x… and 0b…) work in an identical manner in Java as in Python, with the caveat of maximum sizes mentioned below."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Now you can have a try: write some Java code that multiplies the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " variables "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "a"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "b"},
    {"type": "regular", "text": ", and stores this in a new (as-yet undeclared) variable "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "c"},
    {"type": "regular", "text": ":"},
    {"isquestion": true, "questionId": "Java_Python_intIDE"},
    {"type": "regular", "text": "Here's the equivalent Python code:"},
    {"iscode":true,"language": "python","type": "code", "text": "def multiply(a : int, b : int) -> int:\n    // Modified section\n\n    c : int = a * b\n\n    // End of modified section\n    return c\n"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Java has the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "+=x"},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "-=x"},
    {"type": "regular", "text": " and other similar operators, which (mostly) work in the same way as they do in Python."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python’s bitwise operators - and (&), or (|), exclusive or (^) - also exist in Java and work in the same way."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Like in Python, "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s in Java can be negative and are represented in binary via Two’s Complement. This means that, in both Python and Java, "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "-2 & 29847841"},
    {"type": "regular", "text": " evaluates to "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "29847840"},
    {"type": "regular", "text": " evaluates to `29847840`, as these "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s have the same binary representation."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "There is, however, a crucial difference between Python’s "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s and Java’s "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s: Java `int`s have a fixed size of 32 bits. That means that there are minimum and maximum values for Java integers (-2^31 and 2^31 - 1, respectively), and going beyond these values with arithmetic operations will result in integer overflow."},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s have a fixed size of 32 bits. That means that there are minimum and maximum values for Java integers (-2^31 and 2^31 - 1, respectively), and going beyond these values with arithmetic operations will result in integer overflow."},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s: Java "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": "s have a fixed size of 32 bits. That means that there are minimum and maximum values for Java integers (-2^31 and 2^31 - 1, respectively), and going beyond these values with arithmetic operations will result in integer overflow."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "When an integer overflows, all this means is that its binary representation is truncated (cut down) to 32 bits. So, if an arithmetic operation would (mathematically) result in a value that would need 35 bits to store, Java discards the top 3 bits of this mathematical result and returns the remaining 32-bit integer."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "In general, you will probably want to avoid overflow. There are types that will more closely approximate Python’s `int`s which will be mentioned later."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Another consequence of Java’s fixed-size integers is that some binary and hex literals don’t evaluate to the same value in Python and Java. For example,"},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "0b11111111111111111111111111111111"},
    {"type": "regular", "text": " (32 ones) Evaluates to 4294967295 (2^32 - 1) in Python, whereas it evaluates to -1 in Java. This is because Python interprets this number as: "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "0b…00000000011111111111111111111111111111111"},
    {"type": "regular", "text": " (with infinite leading zeroes - corresponding to Python’s infinite-bit-length representation), which is 4294967295 in Two’s Complement, whereas Java interprets the number by padding zeroes only up to its 32 bit representation. Since it is already 32 bits long, Java pads with no zeroes, and so the Two’s Complement value is -1. "},
    {"type": "regular", "text": "Finally, Java, unlike Python, has unary increment and decrement operators: "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "++"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "--"},
    {"type": "regular", "text": ". These can be used in either a prefix (placed before the variable) or postfix (placed after the variable) manner. Here’s the example from before, written in a slightly different way: "},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Java"},
    {"iscode":true,"language": "java","type": "code", "text": "int x = 12; \nint y = 3;\nint z = x + y;\n// z now contains the value `15`\nz++; // This line has been changed\n// z now contains the value `16`\n"},
    {"type": "regular", "text": "The benefit of these operators is that, in addition to modifying the variable, they are expressions that can be used in other expressions. The prefix forms of the operators ("},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "++x"},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "--x"},
    {"type": "regular", "text": ") evaluate to the value of the variable after modification, whereas the postfix forms of the operators ("},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "++x"},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "--x"},
    {"type": "regular", "text": ") evaluate to the value of the variable before modification."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "If you are familiar with Python’s assignment expressions, the following equivalence may be helpful:"},
    {"type": "regular", "text": ""},
    {"type": "regular", "text": ""},
    {"istable":true, "type": "table", "array": [{"Java":"++x","Python":"(x := x + 1)"},
    {"Java":"--x","Python":"(x := x - 1)"},
    {"Java":"x++","Python":"((x := x + 1) - 1) # Here, we subtract 1 to make the expression evaluate to the value of x before it is changed."},
    {"Java":"x--","Python":"((x := x - 1) + 1) # Here, we add 1 to make the expression evaluate to the value of x before it is changed."},
    ]},
    {"isquestion": true, "questionId": "Ints_MCQ1"},
    {"isquestion": true, "questionId": "Ints_MCQ2"},
]

var stringandprint = [
    {"type": "regular", "text": "Strings in Java are immutable, just like in Python. They are defined using the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "String"},
    {"type": "regular", "text": " keyword and, like Python, are essentially an array of characters. For example, we can define a string "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "s"},
    {"type": "regular", "text": " using:"},
    {"iscode":true,"language": "java", "type": "code", "text": "s = \"This is a String\"\nc = s[0] # the value of c is now ‘T’"},
    {"type": "regular", "text": "In Java we use:"},
    {"iscode":true,"language": "java","type": "code", "text": "String s = \"This is a String\";\nc = s.charAt(0)  // the value of c is now ‘T’;"},
    {"type": "regular", "text": "In order to look at a String as an array of characters, we can also use the function "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "toCharArray()"},
    {"iscode":true,"language": "java","type": "code", "text": "String s = \"Hello\";\nchar[] sArray = s.toCharArray();  // sArray == [‘H’, ‘e’, ‘l’, ‘l’, ‘o’]"},
    {"type": "regular", "text": "Print functions in Java are also slightly different to Python. Instead of using "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "print()"},
    {"type": "regular", "text": " in Java we use "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "System.out.println(s)"},
    {"type": "regular", "text": " to print the String "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "s"},
    {"type": "regular", "text": " followed by a new line, or "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "System.out.print(s)"},
    {"type": "regular", "text": " to just print the String "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "s"},
    {"type": "regular", "text": ". These print functions are included in the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "java.io"},
    {"type": "regular", "text": " library. These functions can be called on any object which will then be casted to a String and printed."},
    {"iscode":true,"language": "java","type": "code", "text": "import java.io.*\n\nSystem.out.println(\"hi\");\nSystem.out.print(\"hello\");\nSystem.out.print(5);"},
    {"type": "regular", "text": "will result in: "},
    {"iscode":true,"language": "java","type": "code", "text": "hi\nhello5"},
    {"type": "regular", "text": "Here are some other useful String functions in Java and how they are useful"},
    {"istable":true, "type": "table", "array": [{"Java": "s.charAt(int i)", "Python": "s[i]", "Explanation" : "Returns the character at index i"},
    {"Java": "s.toCharArray()", "Python": "list(s)", "Explanation" : "Returns s as a char array (char[])"},
    {"Java": "s.indexOf(char c)", "Python": "s.index(c)", "Explanation" : "Finds the first instance of char c"},
    {"Java": "s.contains(char c)", "Python": "c in s", "Explanation" : "Returns whether char c is in String s"},
    {"Java": "s.substring(int i)", "Python": "s[:i]", "Explanation" : "Returns a substring from the 0th up to but not including the ith index"},
    {"Java": "s.substring(int i, int j)", "Python": "s[i:j]", "Explanation" : "Returns a substring from the ith up to but not including the jth index"},
    {"Java": "s.length()", "Python": "len(s)", "Explanation" : "Returns the number of characters in the string"},
    ]},
    {"type": "regular", "text": "Note that, unlike Python, you cannot use a negative number to index from the end of a string. Instead, you can subtract from the length of the string (which you can get using the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "length()"},
    {"type": "regular", "text": "method) to directly calculate the correct index. "},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Like Python, we can also add Strings to other Strings to concatenate them. Adding other datatypes to a String will cast the datatype to a String and concatenate them. For example"},
    {"iscode":true,"language": "java","type": "code", "text": "String s1 = \"Hello \"\nString s2 = \"Hi\"\nint i = 7\nSystem.out.println(s1 + s2) // \"Hello Hi\"\nSystem.out.println(s1 + i) // \"Hello 7\"\nSystem.out.println(s1 + i + s2) // \"Hello 7 Hi\"\n"},
    {"type": "regular", "text": "In order to compare functions in Java, we can use the "},
    {"iscodetext":true,"language": "java","type": "codetext", "text": "equals"},
    {"type": "regular", "text": "or"},
    {"iscodetext":true,"language": "java","type": "codetext", "text": "compareTo"},
    {"type": "regular", "text": " functions. "},
    {"iscodetext":true,"language": "java","type": "codetext", "text": "equals"},
    {"type": "regular", "text": " returns a boolean while "},
    {"iscodetext":true,"language": "java","type": "codetext", "text": "compareTo"},
    {"type": "regular", "text": "compares the Strings lexicographically and returns an int. 0 if the strings are equal, < 0 if the string is lexicographically less than the other string, > 0 if the string is lexicographically greater than the other string.  Example:"},
    {"iscode":true,"language": "java","type": "code", "text": "String myStr1 = \"b\";\nString myStr2 = \"b\";\nString myStr3 = \"a\";\nString myStr4 = \"d\";\nSystem.out.println(myStr1.compareTo(myStr2)); // prints \"0\"\nSystem.out.println(myStr1.equals(myStr2)); // prints \"true\"\nSystem.out.println(myStr2.compareTo(myStr3)); // prints \"1\"\nSystem.out.println(myStr2.compareTo(myStr4)); // prints \"-2\""},
    {"isquestion": true, "questionId": "Strings_MCQ1"},
]

var semicolonsandbrackets = [{"type": "regular", "text": "Here are two functions that print the bigger of the two arguments: "},
{"islinebreak": true, "type": "linebreak"},
{"type": "regular", "text": "Python: "},
{"iscode":true,"language": "python","type": "code", "text": "def print_bigger(a, b):\n    if a > b:\n        print(a)\n    else:\n        print(b)"},
{"type": "regular", "text": "Java: "},
{"iscode":true,"language": "java","type": "code", "text": "import java.io.*;\n\nvoid printBigger(int a, int b){\n    if (a > b) {\n        System.out.println(a); \n    } else {\n        System.out.println(b); \n    } \n}"},
{"type": "regular", "text": "Notice that the overall structure of the code is very similar, but the specific syntax is quite different. For instance, instead of using colons and indentation, Java uses curly brackets ("},
{"iscodetext":true,"language": "java","type": "codetext", "text": "{"},
{"type": "regular", "text": ", "},
{"iscodetext":true,"language": "java", "type": "codetext", "text": "}"},
{"type": "regular", "text": ") to specify function and if-statement bodies. Also, statements in Java end in a semicolon ("},
{"iscodetext":true,"language": "java","type": "codetext", "text": ";"},
{"type": "regular", "text": "). There are some other big differences that we will explore soon, but these two are the most visible - and easy to forget!\n "},
{"islinebreak": true, "type": "linebreak"},
{"type": "regular", "text": "The one key exception to this rule is when a code block only contains a single statement. In this case, brackets are not necessary and instead only the next line (up to the semicolon) is automatically contained within the code block"},
{"iscode":true,"language": "java","type": "code", "text": "if (x==0)\n    x++; //contained in if statement block\nx--; // Not contained in if statement block"},
{"type": "regular", "text": "Another key difference is that Java uses "},
{"iscodetext":true,"language": "java", "type": "codetext", "text": "//"},
{"type": "regular", "text": "to comment code which is equivalent to "},
{"iscodetext":true,"language": "python", "type": "codetext", "text": "#"},
{"type": "regular", "text": "in Python"},
{"islinebreak": true, "type": "linebreak"},
{"istable":true, "type": "table", "array": [{" ":"Code Blocks and Control Flow","Python":"Use colons and indentation","Java":"Use opening and closing curly brackets: {, }"},
{" ":"Semicolons Ending Statements","Python":"Unnecessary (and proscribed)","Java":"Necessary"},
]},
{"isquestion": true, "questionId": "Python_Java_SemicolonBrackets_MCQ1"},
{"isquestion": true, "questionId": "Python_Java_SemicolonBrackets_MCQ2"},
]

var floatlongdouble = [
    {"type": "regular", "text": "Unlike Python, there is a maximum value for "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " types in Java. Integers are capped with a max value of "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "2^31-1 = 2147483647"},
    {"type": "regular", "text": " and a minimum of "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "-2^32=-2147483648"},
    {"type": "regular", "text": " as a 32 bit number. Instead, larger integers are defined by the type "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "long"},
    {"type": "regular", "text": " which are 64 bit and have a range of [2^64-1, -2^64]."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "We can get the maximum and minimum integer values using final static constants, "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "Integer.MAX_VALUE"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "Integer.MIN_VALUE"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Similar to the difference between an "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " and a "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "long"},
    {"type": "regular", "text": ", Java also has two different primitives to represent non-integer numbers. A "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "float"},
    {"type": "regular", "text": " uses 32 bits while a "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "double"},
    {"type": "regular", "text": " uses 64 bits to represent a fractional number similar to a "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "float"},
    {"type": "regular", "text": " in Python. Floating point numbers in Java default as a double."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Example primitive definitions:"},
    {"iscode":true,"language": "java","type": "code", "text": "int i1 = 2147483647 // Allowed\nint i2 = 2147483648 // Not allowed (Integer overflow error)\nlong l = int i = 2147483648 // Allowed\ndouble d = 5.0/1.5 //Allowed\n\nif (i < 99.9) {...} // The 99.9 is default typed as a double\n"},
]

var boolandif = [
    {"type": "regular", "text": "Just like Python’s "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "bool"},
    {"type": "regular", "text": ", Java has a "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "boolean"},
    {"type": "regular", "text": " primitive data type with two values: "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "true"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "false"},
    {"type": "regular", "text": ". Note that these names are lowercase, unlike in Python."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Comparison operators (e.g. "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "=="},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "<"},
    {"type": "regular", "text": ", and so forth) evaluate to values of type "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "boolean"},
    {"type": "regular", "text": ", equivalently to how they would in Python."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Instead of the "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "and"},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "or"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "not"},
    {"type": "regular", "text": " keywords used as logical operators in Python, Java uses "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "&&"},
    {"type": "regular", "text": " (for "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "and"},
    {"type": "regular", "text": "), "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "||"},
    {"type": "regular", "text": " (for "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "or"},
    {"type": "regular", "text": "), and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "!"},
    {"type": "regular", "text": " (for "},
    {"iscodetext":true,"language": "python","type": "codetext", "text": "not"},
    {"type": "regular", "text": "), It is important that these first two are not confused with the bitwise operators, "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "&"},
    {"type": "regular", "text": " and "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "|"},
    {"type": "regular", "text": ", which were discussed in the lesson on integers."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Just like their equivalents in Python,"},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "&&"},
    {"type": "regular", "text": " or "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "||"},
    {"type": "regular", "text": " are short-circuiting. That means that the operators can be substituted for each other one-to-one."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python: "},
    {"iscode":true,"language": "python","type": "code", "text": "# These are all True\nt1 : bool = True\nt2 : bool = 2 > 1\nt3 : bool = 7 != 0\n\nt4 : bool = t1 and t3\nt5 : bool = False or t1\nt6 : bool = not False\n\n# These are all False\nf1 : bool = False\nf2 : bool = 7 == 3\nf3 : bool = 3 <= 2\n\nf4 : bool = t2 and f3\nf5 : bool = f3 or f1\nf6 : bool = not True\n"},
    {"type": "regular", "text": "Java: "},
    {"iscode":true,"language": "java","type": "code", "text": "// These are all true\nboolean t1 = true;\nboolean t2 = 2 > 1;\nboolean t3 = 7 != 0;\n\nboolean t4 = t1 && t3;\nboolean t5 = false || t1;\nboolean t6 = !false;\n\n// These are all false\nboolean f1 = false;\nboolean f2 = 7 == 3;\nboolean f3 = 3 <= 2;\n\nboolean f4 = t2 && f3;\nboolean f5 = f3 || f1;\nboolean f6 = !true;"},
    {"type": "regular", "text": "The classic use of booleans is in "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "if"},
    {"type": "regular", "text": "statements, which are very similar between the two languages. The differences are mostly syntactic."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "First, the condition a Java "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "if"},
    {"type": "regular", "text": "(or "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "else if"},
    {"type": "regular", "text": ") statement acts upon must be enclosed in parentheses "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "("},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": ")"},
    {"type": "regular", "text": ". Second, the code block to be run if the condition is true must be enclosed in curly brackets "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "{"},
    {"type": "regular", "text": ", "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "}"},
    {"type": "regular", "text": " (if it consists of more than one statement), and indentation is not semantically important (but should be used for good style). Finally, instead of the "},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": "elif"},
    {"type": "regular", "text": " keyword used in Python, Java uses "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "else if"},
    {"type": "regular", "text": "."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "So, as an example to put these together, consider the following equivalent Java and Python code:"},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Python:"},
    {"iscode":true,"language": "python","type": "code", "text": "z : int = -1;\nif x == 0:\n    z = 10\nelif x == 1:\n    z = 100\nelse:\n    z = 12"},
    {"type": "regular", "text": "Java"},
    {"iscode":true,"language": "java","type": "code", "text": "int z = -1\nif (x == 0) {\n    z = 10;\n} else if (x == 1) {\n    z = 100;\n} else {\n    z = 12;\n}"},
    {"type": "regular", "text": "Observe that we do not place a semicolon after a closing curly bracket, as this is already sufficient to indicate that the statement ends."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Generally, if there is only one statement in a singular if statement, it is good style to omit the brackets:"},
    {"iscode":true,"language": "java","type": "code", "text": "if (x == 0) x++;"},
    {"type": "regular", "text": "Now try doing it yourself. Write Java code to set the value of a declared "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " variable "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "b"},
    {"type": "regular", "text": " to "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "8"},
    {"type": "regular", "text": " if the "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "int"},
    {"type": "regular", "text": " variable "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "a"},
    {"type": "regular", "text": " is even, otherwise "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "9"},
    {"type": "regular", "text": " if "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "a"},
    {"type": "regular", "text": " is divisible by three or otherwise, set it to "},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": "7"},
    {"isquestion": true, "questionId": "Bools_IDE"},
    {"type": "regular", "text": "Equivalent Python Code"},
    {"iscode":true,"language": "python","type": "code", "text": "def even_odd_numbers(a : int) -> int:\n// Modified section\nif a % 2 == 0:\n    # Even!\n    b = 8\nelif a % 3 == 0:\n    # Divisible by 3\n    b = 9\nelse:\n    b = 7\n// End of modified section\nreturn b\n"},
    {"isquestion": true, "questionId": "Bools_MCQ1"},
]
var ocamlsml = [
    {"type": "regular", "text": "Both being part of the ML language family, SML and OCaml are very similar. The main differences come in terms of small syntax, ease-of-use, and stylistic features."},
    {"islinebreak": true, "type": "linebreak"},
    {"type": "regular", "text": "Most classically, SML is the more formal laguage whereas OCaml comes equipped with some useful shortcuts and syntactic sugar to make programming more efficient."},
    {"iscode": true, "language": "java", "type": "code", "text": "val example = \"Hello World\";\nval letterE = String.sub (example, 1);"},
    {"iscode": true, "language": "javascript", "type": "code", "text": "let example = \"Hello World\";\nlet letterE = example.[1];"}
]
var introC = [
    {"type": "regular", "text": "Here are two functions that print the bigger of the two arguments: "},
{"islinebreak": true, "type": "linebreak"},
{"type": "regular", "text": "Python: "},
{"iscode":true,"language": "python","type": "code", "text": "def print_bigger(a, b):\n    if a > b:\n        print(a)\n    else:\n        print(b)"},
{"type": "regular", "text": "C: "},
{"iscode":true,"language": "c","type": "code", "text": "void printBigger(int a, int b){\n    if (a > b) {\n        printf(\"%d\\n\", a); \n    } else {\n        printf(\"%d\\n\", b); \n    } \n}"},
{"type": "regular", "text": "Notice that the overall structure of the code is very similar, but the specific syntax is quite different. For instance, instead of using colons and indentation, C uses curly brackets ("},
{"iscodetext":true,"language": "c","type": "codetext", "text": "{"},
{"type": "regular", "text": ", "},
{"iscodetext":true,"language": "c", "type": "codetext", "text": "}"},
{"type": "regular", "text": ") to specify function and if-statement bodies. Also, statements in C end in a semicolon ("},
{"iscodetext":true,"language": "c","type": "codetext", "text": ";"},
{"type": "regular", "text": "). There are some other big differences that we will explore soon, but these two are the most visible - and easy to forget!\n "},

]

var template = [
    {"istable":true, "type": "table", "array": [{" ":"Code Blocks and Control Flow","Python":"Use colons and indentation","Java":"Use opening and closing curly brackets: {, }"},
    {" ":"Semicolons Ending Statements","Python":"Unnecessary (and proscribed)","Java":"Necessary"}
    ]},
    {"type": "regular", "text": ""},
    {"islinebreak": true, "type": "linebreak"},
    {"iscodetext":true,"language": "java", "type": "codetext", "text": ""},
    {"iscodetext":true,"language": "python", "type": "codetext", "text": ""},
    {"iscode":true,"language": "python","type": "code", "text": ""},
    {"iscode":true,"language": "java","type": "code", "text": ""},
]

var lessonPlans = [
    {lang1: "Python", lang2: "Java"},
    {lang1: "Python", lang2: "C"},
    {lang1: "SML", lang2: "OCaml"}
]

var lessons = [
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Semicolons and Brackets", unit: 1, num: 1, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Types and Integers", unit: 1, num: 2, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Simple Data Types: Strings", unit: 1, num: 3, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Doubles, Floats, and Longs", unit: 1, num: 4, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Simple Data Types: Booleans", unit: 1, num: 5, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Loops: While Loops", unit: 2, num: 6, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Loops: For Loops and For each Loops", unit: 2, num: 7, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "List-like Structures: Arrays", unit: 2, num: 8, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "List-like Structures: ArrayLists", unit: 2, num: 9, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Iteration with List-like Structures", unit: 2, num: 10, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Advanced Strings: Comparison", unit: 2, num: 11, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Creating Functions", unit: 3, num: 12, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Creating Basic Classes", unit: 3, num: 13, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Inheritance of Classes", unit: 3, num: 14, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Abstract Classes and Interfaces", unit: 3, num: 15, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Objects", unit: 3, num: 16, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Importing Other Classes", unit: 3, num: 17, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Three Types of Dictionary", unit: 4, num: 18, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Set Objects", unit: 4, num: 19, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Queues and Priority Queues", unit: 4, num: 20, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Stack Objects", unit: 4, num: 21, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Tree Objects", unit: 4, num: 22, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Miscellaneous Mathematical Operations", unit: 5, num: 23, numPages: 1}},
    {lessonPlan: {lang1: "Python", lang2: "Java"}, lesson: {name: "Setting Up a Project", unit: 5, num: 24, numPages: 1}},

    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Getting Started on OCaml", unit: 1, num: 1, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Types: Primitives", unit: 1, num: 2, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Types: Functions", unit: 1, num: 3, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Types: Lists and Options", unit: 1, num: 4, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Basic Syntax and Evaluation", unit: 1, num: 5, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Tail Recursion", unit: 2, num: 6, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Parametric Polymorphism", unit: 2, num: 7, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "HOFs and Currying", unit: 2, num: 8, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Control Flow: CPS", unit: 2, num: 9, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Modules and Functors", unit: 3, num: 10, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Lazy Evaluation", unit: 3, num: 11, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Sequences", unit: 3, num: 12, numPages: 1}},
    {lessonPlan: {lang1: "SML", lang2: "OCaml"}, lesson: {name: "Other Important Concepts", unit: 3, num: 13, numPages: 1}},

    {lessonPlan: {lang1: "Python", lang2: "C"}, lesson: {name: "Getting Started with C", unit: 1, num: 1, numPages: 1}},
]

var pages = [
    {lessonName: "Semicolons and Brackets", page: {page: 1, pageData: {arr: semicolonsandbrackets}}},
    {lessonName: "Types and Integers", page: {page: 1, pageData: {arr: ints}}},
    {lessonName: "Simple Data Types: Strings", page: {page: 1, pageData: {arr: stringandprint}}},
    {lessonName: "Doubles, Floats, and Longs", page: {page: 1, pageData: {arr: floatlongdouble}}},
    {lessonName: "Simple Data Types: Booleans", page: {page: 1, pageData: {arr: boolandif}}},
    {lessonName: "Getting Started on OCaml", page: {page: 1, pageData: {arr: ocamlsml}}},
    {lessonName: "Getting Started with C", page: {page: 1, pageData: {arr: introC}}}
]

var questions = [
    {lessonName: "Semicolons and Brackets", question: {id: "Python_Java_SemicolonBrackets_MCQ1", type: "multipleChoice", data: JSON.stringify({
        question: [{"isregular":true, "type": "regular", "text": "Is this Java code valid?\n"},
                   {"iscode":true,"language": "java","type": "code", "text": "if(x==0) return true;"},
                    ],
        options: ["Yes", "No"],
        answer: "Yes"
    })}},
    {lessonName: "Semicolons and Brackets", question: {id: "Python_Java_SemicolonBrackets_MCQ2", type: "multipleChoice", data: JSON.stringify({
        question: [{"isregular":true, "type": "regular", "text": "Indentation is syntantically important in Java"},
        ],
        options: ["Always", "Never", "Sometimes"],
        answer: "Never"
    })}},
    {lessonName: "Types and Integers", question: {id: "Ints_MCQ1", type: "multipleChoice", data: JSON.stringify({
        question: [
            {"isregular":true, "type": "regular", "text": "What is wrong with the following Java code?"},
            {"iscode":true,"language": "java","type": "code", "text": "int i = 1;\nint j = 2;\nint i = i + j;\n// i is now 3, right?"}
        ],
        options: ["You cannot use the `int` type in Java - the correct type is `Integer`", "This code declares `i` twice; the third line should not include the type of `i` (`int`)", "The `+` operator does not exist in Java - you must write `i.add(j)`", "There is nothing wrong with this code"],
        answer: "This code declares `i` twice; the third line should not include the type of `i` (`int`)"
    })}},
    {lessonName: "Types and Integers", question: {id: "Java_Python_intIDE", type: "code", data: JSON.stringify({
        language : "java",
        startercode : ['import java.util.ArrayList;', 'import java.util.Scanner;', 'import java.io.File;', '', 'class Main {', '\tprivate static int multiply(int a, int b) {', '\t\t// MODIFY CODE FROM HERE', '', '', '', '\t\t// DO NOT MODIFY PAST THIS LINE', '\t\treturn c;', '\t}', '', ' \tpublic static void main(String[] args) throws Exception {', '\t\tString filename = args[0];', '\t\tScanner scanner = new Scanner(new File(filename));', '', '\t\tArrayList<Integer> arr = new ArrayList<>();', '\t\twhile (scanner.hasNextInt()) {', '\t\t\tarr.add(scanner.nextInt());', '\t\t}', '\t\tscanner.close();', '', '\t\tfor (int i = 0; i < arr.size() - 1; i += 2) {', '\t\t\tSystem.out.println(multiply(arr.get(i), arr.get(i+1)));', '\t\t}', '\t}', '}', ''],
        compilationCommand: "javac Main.java",
        executionCommand: "java Main input.txt",
        input: "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n0\n23\n35\n0\n-3\n4\n-5\n-6\n2\n-9\n",
        timeout: 5,
        expectedOutput: "2\n12\n30\n56\n90\n0\n0\n-12\n30\n-18\n"
    })}},
    {lessonName: "Types and Integers", question: {id: "Ints_MCQ2", type: "multipleChoice", data: JSON.stringify({
        question: [
            {"isregular":true, "type": "regular", "text": "True or false: the following Python and Java code samples calculate the same number"},
            {"iscodetext":true,"language": "java", "type": "codetext", "text": "z"},
            {"isregular":true, "type": "regular", "text": "."},
            {"iscode":true,"language": "python","type": "code", "text": "# Python\nx = 2147483647\ny = 20\nz = x + y"},
            {"iscode":true,"language": "java","type": "code", "text": "// Java\nint x = 2147483647\nint y = 20\nint z = x + y"},
        ],
        options: ["True", "False"],
        answer: "False"
    })}},
    {lessonName: "Simple Data Types: Strings", question: {id: "Strings_MCQ1", type: "multipleChoice", data: JSON.stringify({
        question: [{"isregular":true, "type": "regular", "text": "How do I find the length of a String "},
        {"iscodetext":true,"language": "java","type": "codetext", "text": "s"},
        ],
        options: ["s.length", "s.length()", "length(s)", "len(s)"],
        answer: "s.length()"
    })}},
    {lessonName: "Simple Data Types: Booleans", question: {id: "Bools_MCQ1", type: "multipleChoice", data: JSON.stringify({
        question: [{"isregular":true, "type": "regular", "text": "Is the following Java code valid?"},
        {"iscode":true,"language": "java","type": "code", "text": "int x=0\nif(TRUE) x++;"},
        ],
        options: ["Yes", "No"],
        answer: "No"
    })}},
    {lessonName: "Simple Data Types: Booleans", question: {id: "Bools_IDE", type: "code", data: JSON.stringify({
        language : "java",
        startercode : ['int evenOddNumbers(int a) {', '\tint b;','\t// MODIFY FROM THIS LINE', , '\t','\t',,'\t// DO NOT MODIFY PAST THIS LINE','\treturn b;','}']
    })}},
]

module.exports = {
    lessonPlans: lessonPlans,
    lessons: lessons,
    pages: pages,
    questions: questions
};
